<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>webdav</title>
    <link href="/2019/06/22/%E6%95%99%E7%A8%8B/webdav/"/>
    <url>/2019/06/22/%E6%95%99%E7%A8%8B/webdav/</url>
    
    <content type="html"><![CDATA[<p>安装软件</p><figure class="highlight routeros"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-built_in">get</span> install davfs2<br></code></pre></td></tr></table></figure><p>如果是使用坚果云，修改配置文件/etc/davfs2/davfs2.conf,在文件尾加上’ignore_dav_header 1’ <a href="https://zohead.com/archives/davfs2-nutstore/">来源</a></p><p>挂载</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo mount -t davfs https:<span class="hljs-regexp">//</span>dav.jianguoyun.com<span class="hljs-regexp">/dav/</span>  <span class="hljs-regexp">/mnt/</span>webdav/<br></code></pre></td></tr></table></figure><p>查看</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">ls <span class="hljs-regexp">/mnt/</span>webdav<br></code></pre></td></tr></table></figure><p>为了长期使用:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> ~/.davfs2/<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;https://webdav.example.com webdavuser webdavpassword&quot;</span> &gt;&gt; ~/.davfs2/secrets<br><span class="hljs-built_in">chmod</span> 0600 ~/.davfs2/secrets<br></code></pre></td></tr></table></figure><p>将用户添加进davfs2用户组</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">sudo usermod -<span class="hljs-selector-tag">a</span> -G davfs2 username<br></code></pre></td></tr></table></figure><p>编辑/etc/fstab文件，在文件尾添加如下内容，注意用户名换成自己的</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">https</span>://webdav.example.com /home/username/webdav davfs user,noauto,uid=username,file_mode=<span class="hljs-number">600</span>,dir_mode=<span class="hljs-number">700</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>挂载</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">mount <span class="hljs-regexp">/home/u</span>sername/webdav<br></code></pre></td></tr></table></figure><p>取消挂载</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">unmount  <span class="hljs-regexp">/home/u</span>sername/webdav<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>知识图谱若干软件的安装教程</title>
    <link href="/2019/02/22/%E6%95%99%E7%A8%8B/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E8%8B%A5%E5%B9%B2%E8%BD%AF%E4%BB%B6%E7%9A%84%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    <url>/2019/02/22/%E6%95%99%E7%A8%8B/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E8%8B%A5%E5%B9%B2%E8%BD%AF%E4%BB%B6%E7%9A%84%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>假设我们要把软件们安装在<code>$HOME/KG/</code>目录下。</p><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> ~/KG<br><span class="hljs-built_in">cd</span> ~/KG<br></code></pre></td></tr></table></figure><h3 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h3><p>执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://github.com/downloads/d2rq/d2rq/d2rq-0.8.1.tar.gz<br>wget https://mirror.tuna.tsinghua.edu.cn/apache/jena/binaries/apache-jena-3.10.0.zip<br>wget https://mirror.tuna.tsinghua.edu.cn/apache/jena/binaries/apache-jena-fuseki-3.10.0.zip<br></code></pre></td></tr></table></figure><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">unzip ./apache-jena-fuseki-3.10.0.zip <br>unzip ./apache-jena-3.10.0.zip<br>tar -xvzf d2rq-0.8.1.tar.gz<br></code></pre></td></tr></table></figure><h3 id="运行一下试试"><a href="#运行一下试试" class="headerlink" title="运行一下试试"></a>运行一下试试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> apache-jena-fuseki-3.10.0<br>./fuseki-server<br></code></pre></td></tr></table></figure><p>如果正常，会有如下的输出:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">[<span class="hljs-number">2019</span>-<span class="hljs-number">02</span>-<span class="hljs-number">22</span> <span class="hljs-number">10</span>:<span class="hljs-number">10</span>:<span class="hljs-number">38</span>] Server     INFO  Apache Jena Fuseki <span class="hljs-number">3.10</span>.<span class="hljs-number">0</span><br>[<span class="hljs-number">2019</span>-<span class="hljs-number">02</span>-<span class="hljs-number">22</span> <span class="hljs-number">10</span>:<span class="hljs-number">10</span>:<span class="hljs-number">38</span>] Config     INFO  FUSEKI_HOME=<span class="hljs-regexp">/home/</span>han<span class="hljs-regexp">/Documents/</span>know/apache-jena-fuseki-<span class="hljs-number">3.10</span>.<span class="hljs-number">0</span><br>[<span class="hljs-number">2019</span>-<span class="hljs-number">02</span>-<span class="hljs-number">22</span> <span class="hljs-number">10</span>:<span class="hljs-number">10</span>:<span class="hljs-number">38</span>] Config     INFO  FUSEKI_BASE=<span class="hljs-regexp">/home/</span>han<span class="hljs-regexp">/Documents/</span>know/fuseki-run<br>[<span class="hljs-number">2019</span>-<span class="hljs-number">02</span>-<span class="hljs-number">22</span> <span class="hljs-number">10</span>:<span class="hljs-number">10</span>:<span class="hljs-number">38</span>] Config     INFO  Shiro file: file:<span class="hljs-regexp">//</span><span class="hljs-regexp">/home/</span>han<span class="hljs-regexp">/Documents/</span>know<span class="hljs-regexp">/fuseki-run/</span>shiro.ini<br>[<span class="hljs-number">2019</span>-<span class="hljs-number">02</span>-<span class="hljs-number">22</span> <span class="hljs-number">10</span>:<span class="hljs-number">10</span>:<span class="hljs-number">38</span>] Config     INFO  Configuration file: <span class="hljs-regexp">/home/</span>han<span class="hljs-regexp">/Documents/</span>know<span class="hljs-regexp">/fuseki-run/</span>config.ttl<br>[<span class="hljs-number">2019</span>-<span class="hljs-number">02</span>-<span class="hljs-number">22</span> <span class="hljs-number">10</span>:<span class="hljs-number">10</span>:<span class="hljs-number">39</span>] Server     INFO  Started <span class="hljs-number">2019</span><span class="hljs-regexp">/02/</span><span class="hljs-number">22</span> <span class="hljs-number">10</span>:<span class="hljs-number">10</span>:<span class="hljs-number">39</span> CST on port <span class="hljs-number">3030</span><br></code></pre></td></tr></table></figure><p>在浏览器中打开<a href="http://localhost:3030/">http://localhost:3030/</a>,能打开如下的网页:</p><p><img src="/img/fuseki.png"></p><h3 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h3><p>为了使用方便，在各个目录中都能使用命令调用软件，我们需要设置环境变量，把可执行文件所在的目录加到PATH变量中去。<br>编辑<code>~/.bashrc</code>文件，在文件末尾加入如下内容:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> PATH=<span class="hljs-string">&quot;<span class="hljs-variable">$HOME</span>/KG/apache-jena-3.10.0/bin:<span class="hljs-variable">$PATH</span>&quot;</span><br><span class="hljs-built_in">export</span> FUSEKI_HOME=<span class="hljs-string">&quot;<span class="hljs-variable">$HOME</span>/KG/apache-jena-fuseki-3.10.0&quot;</span><br><span class="hljs-built_in">export</span> PATH=<span class="hljs-string">&quot;<span class="hljs-variable">$FUSEKI_HOME</span>:<span class="hljs-variable">$PATH</span>&quot;</span><br><span class="hljs-built_in">export</span> FUSEKI_BASE=<span class="hljs-string">&quot;<span class="hljs-variable">$HOME</span>/KG/run&quot;</span><br><span class="hljs-built_in">export</span> PATH=<span class="hljs-string">&quot;<span class="hljs-variable">$HOME</span>/KG/d2rq-0.8.1:<span class="hljs-variable">$PATH</span>&quot;</span><br></code></pre></td></tr></table></figure><p>然后执行<code>source ~/.bashrc</code>或者重新打开终端，刷新环境变量。</p>]]></content>
    
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Connect-Three</title>
    <link href="/2018/12/24/ACM/Connect-Three/"/>
    <url>/2018/12/24/ACM/Connect-Three/</url>
    
    <content type="html"><![CDATA[<p><a href="http://codeforces.com/contest/1087/problem/C">http://codeforces.com/contest/1087/problem/C</a></p><p>The Squareland national forest is divided into equal 1×1 square plots aligned with north-south and east-west directions. Each plot can be uniquely described by integer Cartesian coordinates (𝑥,𝑦) of its south-west corner.</p><p>Three friends, Alice, Bob, and Charlie are going to buy three distinct plots of land 𝐴,𝐵,𝐶 in the forest. Initially, all plots in the forest (including the plots 𝐴,𝐵,𝐶) are covered by trees. The friends want to visit each other, so they want to clean some of the plots from trees. After cleaning, one should be able to reach any of the plots 𝐴,𝐵,𝐶 from any other one of those by moving through adjacent cleared plots. Two plots are adjacent if they share a side.</p><p>For example, 𝐴=(0,0), 𝐵=(1,1), 𝐶=(2,2). The minimal number of plots to be cleared is 5. One of the ways to do it is shown with the gray color.<br>Of course, the friends don’t want to strain too much. Help them find out the smallest number of plots they need to clean from trees.</p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>The first line contains two integers 𝑥𝐴 and 𝑦𝐴 — coordinates of the plot 𝐴 (0≤𝑥𝐴,𝑦𝐴≤1000). The following two lines describe coordinates (𝑥𝐵,𝑦𝐵) and (𝑥𝐶,𝑦𝐶) of plots 𝐵 and 𝐶 respectively in the same format (0≤𝑥𝐵,𝑦𝐵,𝑥𝐶,𝑦𝐶≤1000). It is guaranteed that all three plots are distinct.</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>On the first line print a single integer 𝑘 — the smallest number of plots needed to be cleaned from trees. The following 𝑘 lines should contain coordinates of all plots needed to be cleaned. All 𝑘 plots should be distinct. You can output the plots in any order.</p><p>If there are multiple solutions, print any of them.</p><h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><p>input</p><figure class="highlight basic"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">0 </span><span class="hljs-number">0</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>output</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">5</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">0</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">0</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>input</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">0 </span><span class="hljs-number">0</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">0</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>output</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">4</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">0</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">0</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>先只看横坐标，把三个x值从左到右分别叫做Xl,Xm,Xr,，因为要把三个点连起来而且代价尽量小，所以我们只需要从xl到xr连起来就可以了，而且每列只使用一个点，外面的区间就不需要点了。同理，纵坐标也是从Yh到Yl连起来。</p><p>所以，我们画三个线段。第一个是(Xm,Yl)到(Xm,Yh),这一条竖线能把三个点的纵向的连起来。为了横向的连起来，还要画两个横线，记Xl,Xr对应的Y值分别是Yl,Yr,那我们就可以画出(xl,Yl)到(Xm,Yl)和(Xr,Yr)到(Xm,Yr)两个线段就可以了。当然，要注意重复的情况。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-keyword">typedef</span> pair&lt;ll, ll&gt; pll;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    pll p[<span class="hljs-number">5</span>];<br>    ll maxY = <span class="hljs-number">-1e18</span>, minY = <span class="hljs-number">1e18</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">3</span>; i++) &#123;<br>        ll x, y;<br>        cin &gt;&gt; x &gt;&gt; y;<br>        p[i] = <span class="hljs-built_in">pll</span>(x, y);<br>        maxY = <span class="hljs-built_in">max</span>(maxY, y);<br>        minY = <span class="hljs-built_in">min</span>(minY, y);<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(p + <span class="hljs-number">1</span>, p + <span class="hljs-number">4</span>, [](pll a, pll b) &#123;<br>        <span class="hljs-keyword">return</span> a.first &lt; b.first;<br>    &#125;);<br>    vector&lt;pll&gt; ans;<br>    <span class="hljs-keyword">for</span> (ll i = minY; i &lt;= maxY; i++) &#123;<br>        ans.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">pll</span>(p[<span class="hljs-number">2</span>].first, i));<br>    &#125;<br>    <span class="hljs-keyword">if</span> (p[<span class="hljs-number">1</span>].first &lt; p[<span class="hljs-number">2</span>].first) &#123;<br>        <span class="hljs-keyword">for</span> (ll i = p[<span class="hljs-number">1</span>].first; i &lt; p[<span class="hljs-number">2</span>].first; i++) &#123;<br>            ans.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">pll</span>(i, p[<span class="hljs-number">1</span>].second));<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p[<span class="hljs-number">1</span>].first &gt; p[<span class="hljs-number">2</span>].first) &#123;<br>        <span class="hljs-keyword">for</span> (ll i = p[<span class="hljs-number">2</span>].first + <span class="hljs-number">1</span>; i &lt;= p[<span class="hljs-number">1</span>].first; i++) &#123;<br>            ans.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">pll</span>(i, p[<span class="hljs-number">1</span>].second));<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (p[<span class="hljs-number">3</span>].first &lt; p[<span class="hljs-number">2</span>].first) &#123;<br>        <span class="hljs-keyword">for</span> (ll i = p[<span class="hljs-number">3</span>].first; i &lt; p[<span class="hljs-number">2</span>].first; i++) &#123;<br>            ans.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">pll</span>(i, p[<span class="hljs-number">3</span>].second));<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p[<span class="hljs-number">3</span>].first &gt; p[<span class="hljs-number">2</span>].first) &#123;<br>        <span class="hljs-keyword">for</span> (ll i = p[<span class="hljs-number">2</span>].first + <span class="hljs-number">1</span>; i &lt;= p[<span class="hljs-number">3</span>].first; i++) &#123;<br>            ans.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">pll</span>(i, p[<span class="hljs-number">3</span>].second));<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; ans.<span class="hljs-built_in">size</span>() &lt;&lt; endl;<br>    <span class="hljs-keyword">for</span> (pll p:ans) &#123;<br>        cout &lt;&lt; p.first &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; p.second &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UPCOJ-8018-hongkong</title>
    <link href="/2018/07/13/ACM/UPCOJ-8018-hongkong/"/>
    <url>/2018/07/13/ACM/UPCOJ-8018-hongkong/</url>
    
    <content type="html"><![CDATA[<p>时间限制: 1 Sec  内存限制: 128 MB</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><figure class="highlight stylus"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><pre><code class="hljs stylus">申生在内而亡，重耳在外而安。<br>考虑k+<span class="hljs-number">1</span>个数组<span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[i]</span>(<span class="hljs-number">0</span>≤i≤k)。<br>为了方便起见，每个数组<span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[i]</span>长度为n，下标从<span class="hljs-number">1</span>开始。（直观来说就是第一维下标从<span class="hljs-number">0</span>开始，第二维下标从<span class="hljs-number">1</span>开始。）<br>其中<span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[i]</span>时时刻刻是<span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[i−1]</span>(<span class="hljs-number">1</span>≤i≤k)的前缀和。<br>前缀和就是<span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[i]</span><span class="hljs-selector-attr">[1]</span>=<span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[i−1]</span><span class="hljs-selector-attr">[1]</span>且<span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[i]</span><span class="hljs-selector-attr">[j]</span>=<span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[i]</span><span class="hljs-selector-attr">[j−1]</span>+<span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[i−1]</span><span class="hljs-selector-attr">[j]</span>(j≥<span class="hljs-number">2</span>)。<br>比如<span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[0]</span>=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;，那么<span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[1]</span>=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[2]</span>=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;,<span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[3]</span>=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">6</span>,<span class="hljs-number">10</span>&#125;<br>此时如果我们修改<span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[0]</span><span class="hljs-selector-attr">[3]</span>+=<span class="hljs-number">1</span>，得到新的<span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[i]</span>。<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[0]</span>=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>&#125;,<span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[1]</span>=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>&#125;,<span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[2]</span>=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>&#125;,<span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[3]</span>=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">13</span>&#125;<br>你需要支持<span class="hljs-number">2</span>个操作。<br>修改操作：输入x,y，执行<span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[0]</span><span class="hljs-selector-attr">[x]</span>+=y。<br>询问操作：输入x，返回<span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[k]</span><span class="hljs-selector-attr">[x]</span>的值。<br>由于结果可能很大，你只需要输出询问的值对<span class="hljs-number">1000000007</span>取模的结果。<br></code></pre></td></tr></table></figure><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">第一行三个整数n,m,k，分别表示数组长度，操作次数，前缀和次数。<br>接下来m行，每行一个操作。<br>如果第一个数字是<span class="hljs-number">0</span>，接下来会有<span class="hljs-number">2</span>个数字x,y表示修改，<span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[0]</span><span class="hljs-selector-attr">[x]</span>+=y。<br>如果第一个数字是<span class="hljs-number">1</span>，接下来会有<span class="hljs-number">1</span>个数字x表示询问<span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[k]</span><span class="hljs-selector-attr">[x]</span>。<br></code></pre></td></tr></table></figure><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns">对于每个询问操作，输出询问的值对<span class="hljs-number">1000000007</span>取模的结果。<br></code></pre></td></tr></table></figure><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">4 </span><span class="hljs-number">11</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">1</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">3</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">4</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">3</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h2 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs">1<br>3<br>7<br>13<br>1<br>3<br>8<br>16<br></code></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">对于<span class="hljs-number">100</span><span class="hljs-comment">%的数据，满足1≤n≤10000,1≤m≤10000,1≤k≤100。</span><br>对于<span class="hljs-number">100</span><span class="hljs-comment">%的数据，满足1≤x≤n,0≤y&lt;1000000007。</span><br>对于<span class="hljs-number">70</span><span class="hljs-comment">%的数据，满足1≤k≤10。</span><br>对于<span class="hljs-number">30</span><span class="hljs-comment">%的数据，满足1≤k≤2。</span><br></code></pre></td></tr></table></figure><h2 id="来源-分类"><a href="#来源-分类" class="headerlink" title="来源/分类"></a>来源/分类</h2><p><a href="http://exam.upc.edu.cn/problemset.php?search=%E6%B1%9F%E8%8B%8F2018%E7%9C%81%E9%98%9F">江苏2018省队</a></p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>假设题目中的a数组的第0行的值分别是a,b,c,d,e…<br>写一写a数组的递推过程：</p><table><thead><tr><th>列\行</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th></tr></thead><tbody><tr><td>0</td><td>a</td><td>b</td><td>c</td><td>d</td><td>e</td></tr><tr><td>1</td><td>a</td><td>a+b</td><td>a+b+c</td><td>a+b+c+d</td><td>a+b+c+d+e</td></tr><tr><td>2</td><td>a</td><td>2a+b</td><td>3a+2b+c</td><td>4a+3b+2c+d</td><td>5a+4b+3c+2d+e</td></tr><tr><td>3</td><td>a</td><td>3a+b</td><td>6a+3b+c</td><td>10a+6b+3c+d</td><td>15a+10b+6c+3d+e</td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>观察它们的系数的变化，可以发现系数都来源于一个前缀和数组：</td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><table><thead><tr><th>列\行</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th></tr></thead><tbody><tr><td>0</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td></tr><tr><td>2</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td></tr><tr><td>3</td><td>1</td><td>3</td><td>6</td><td>10</td><td>15</td></tr><tr><td>令这个数组为b，其递推求法为：</td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++">b[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=k;i++)&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)&#123;<br>        b[i][j]=b[i][j<span class="hljs-number">-1</span>]+b[i<span class="hljs-number">-1</span>][j];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> 这时我们很容易就能求出<code>a[k][x]</code>：<br><code> a[k][x] = sum ( a[0][j]*b[k][x-j+1] ) , (1&lt;=j&lt;=x)</code></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span>  <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> ll mod =<span class="hljs-number">1000000007</span>;<br><br>ll n,m,k;<br>ll a[<span class="hljs-number">10050</span>];<br>ll b[<span class="hljs-number">105</span>][<span class="hljs-number">10050</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br>    <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;in.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld%lld&quot;</span>,&amp;n,&amp;m,&amp;k);<br>    b[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=k;i++)&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)&#123;<br>            b[i][j]=(b[i][j<span class="hljs-number">-1</span>]+b[i<span class="hljs-number">-1</span>][j])%mod;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (m--)&#123;<br>        ll op ;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,&amp;op);<br>        <span class="hljs-keyword">if</span> (op==<span class="hljs-number">0</span>)&#123;<br>            ll x,y;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld&quot;</span>,&amp;x,&amp;y);<br>            a[x]+=y;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            ll x;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,&amp;x);<br>            ll ans = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (ll i=<span class="hljs-number">1</span>;i&lt;=x;i++)&#123;<br>                ans = (ans+a[i]*b[k][x-i+<span class="hljs-number">1</span>])%mod;<br>            &#125;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,ans);<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/**************************************************************</span><br><span class="hljs-comment">    Problem: 8018</span><br><span class="hljs-comment">    User: WC011</span><br><span class="hljs-comment">    Language: C++</span><br><span class="hljs-comment">    Result: 正确</span><br><span class="hljs-comment">    Time:672 ms</span><br><span class="hljs-comment">    Memory:9492 kb</span><br><span class="hljs-comment">****************************************************************/</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>任其崩溃思想在爬虫中的应用</title>
    <link href="/2018/06/24/%E9%9A%8F%E7%AC%94/%E4%BB%BB%E5%85%B6%E5%B4%A9%E6%BA%83%E6%80%9D%E6%83%B3%E5%9C%A8%E7%88%AC%E8%99%AB%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <url>/2018/06/24/%E9%9A%8F%E7%AC%94/%E4%BB%BB%E5%85%B6%E5%B4%A9%E6%BA%83%E6%80%9D%E6%83%B3%E5%9C%A8%E7%88%AC%E8%99%AB%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>一个同学的项目需要一些网站的首页的截图，网站数量大概有几千个，这么多的网站当然要用爬虫去爬了</p><p>百度出来一个看起来靠谱的方法，用了selenium库，例程如下：</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver <br>url = <span class="hljs-string">&quot;http://baidu.com&quot;</span><br>picName = <span class="hljs-string">&quot;baidu.png&quot;</span> <br>brower=webdriver.Chrome() <br>brower.get(url)             <br>brower.save_screenshot(picName)   <br>brower.close()     <br></code></pre></td></tr></table></figure><p>试了一下很成功，然而真正用起来却踩了无数的坑</p><ol><li>网页下载图片是需要时间的，而<code>brower.get(url)</code>这个函数不等到所有的资源都加载完是不会退出的</li><li>几千个网址里面有一些是已经废弃的假网站，<code>brower.get(url)</code>无法识别出来，只会一直等它们返回内容</li><li><code>brower=webdriver.Chrome()</code> 会打开一个浏览器窗口，据我观察发现，如果这个浏览器打开网页后出现了网址跳转，拒绝连接等情况，python程序就不能控制这个浏览器窗口了，导致<code>brower.close()</code>不能正常执行，浏览器关不掉</li></ol><p>于是我对于各个问题都研究出了解决方案</p><ol><li>针对第一个坑，使用<code>browser.set_page_load_timeout(10)</code>给网页加载设定一个时限，如果超时的话就会抛出<code>TimeoutException</code>异常，然后我们再执行<code>browser.execute_script(&#39;window.stop()&#39;)</code> 用javascript使网页停止加载。</li><li>第二个坑，是对方网站坑我们，所以我们就不截图了。但是如果程序一直阻塞也不是办法，所以还是给程序设定一个时限，如果超时就强制停止。这里我用的是<code>@timeout_decorator.timeout(12)</code>这个装饰器</li><li><code>brower.close()</code>关不掉浏览器，那就直接调用shell命令<code>kill</code>掉不就行了</li></ol><p>无数次debug后，我终于写出了能用的代码。<br>回过头来一想，“浏览器崩了就崩了，直接kill掉”这个操作不就是“let it crash”思想的体现吗。有了异常情况如果不能正确处理，就应该任其崩溃，而不是以错误状态继续执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver <br><span class="hljs-keyword">from</span> selenium.webdriver.chrome.options <span class="hljs-keyword">import</span> Options<br><span class="hljs-keyword">from</span> selenium.common.exceptions <span class="hljs-keyword">import</span> TimeoutException<br><span class="hljs-keyword">import</span> csv<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> timeout_decorator<br><span class="hljs-keyword">import</span> os<br>csvName = <span class="hljs-string">&quot;out.csv&quot;</span><br><br><span class="hljs-meta">@timeout_decorator.timeout(<span class="hljs-params"><span class="hljs-number">12</span></span>) </span><span class="hljs-comment"># 如果12秒内函数没有执行完，就停止，抛出timeout异常</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">shot</span>(<span class="hljs-params">browser, url,picName</span>):<br>    <span class="hljs-built_in">print</span>( url , picName)  <br>    <span class="hljs-keyword">try</span>:<br>        browser.get(url)  <span class="hljs-comment"># 打开网页        </span><br>    <span class="hljs-keyword">except</span> TimeoutException <span class="hljs-keyword">as</span> err:<br>        <span class="hljs-built_in">print</span>(err)<br>        browser.execute_script(<span class="hljs-string">&#x27;window.stop()&#x27;</span>) <span class="hljs-comment"># 用javascript使网页停止加载</span><br>    <span class="hljs-keyword">finally</span>:<br>        browser.save_screenshot(picName) <span class="hljs-comment"># 截图  </span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(csvName) <span class="hljs-keyword">as</span> f:<br>        reader = csv.reader(f)<br>        cnt = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>(reader):<br>            url = i[<span class="hljs-number">3</span>]  <span class="hljs-comment"># 网址</span><br>            <span class="hljs-keyword">if</span> cnt%<span class="hljs-number">10</span> == <span class="hljs-number">0</span>: <span class="hljs-comment"># 执行shell命令杀死所有chrome进程</span><br>                os.system(<span class="hljs-string">&quot;ps -aux | grep chrome | grep -v grep | awk &#x27;&#123;print $2&#125;&#x27; | xargs kill&quot;</span>)<br>            picName = <span class="hljs-built_in">str</span>(cnt) + <span class="hljs-string">&quot;.png&quot;</span> <span class="hljs-comment"># 图片名称</span><br>            cnt=cnt+<span class="hljs-number">1</span> <br>            browser = webdriver.Chrome()  <span class="hljs-comment"># 打开浏览器</span><br>            browser.set_page_load_timeout(<span class="hljs-number">10</span>)  <span class="hljs-comment"># 如果10秒内网页没有加载完，抛出timeout异常</span><br>            browser.set_window_size(<span class="hljs-number">1300</span>,<span class="hljs-number">704</span>)  <span class="hljs-comment"># 设定窗口大小</span><br>            <span class="hljs-keyword">try</span>:  <br>                shot(browser,url,picName) <br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> err: <br>                <span class="hljs-built_in">print</span>(err)<br>            <span class="hljs-keyword">finally</span>:<br>                browser.quit() <span class="hljs-comment"># 关闭浏览器</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>T-shirt</title>
    <link href="/2018/06/06/ACM/T-shirt/"/>
    <url>/2018/06/06/ACM/T-shirt/</url>
    
    <content type="html"><![CDATA[<p>时间限制: 1 Sec  内存限制: 64 MB</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>JSZKC is going to spend his vacation!<br>His vacation has N days. Each day, he can choose a T-shirt to wear. Obviously, he doesn’t want to wear a singer color T-shirt since others will consider he has worn one T-shirt all the time.<br>To avoid this problem, he has M different T-shirt with different color. If he wears A color T-shirt this day and B color T-shirt the next day, then he will get the pleasure of <code>f[A][B]</code>.(notice: He is able to wear one T-shirt in two continuous days but may get a low pleasure)<br>Please calculate the max pleasure he can get. </p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>The input file contains several test cases, each of them as described below.<br>The first line of the input contains two integers N,M (2 ≤ N≤ 100000, 1 ≤ M≤ 100), giving the length of vacation and the T-shirts that JSZKC has.<br>The next follows M lines with each line M integers. The jth integer in the ith line means <code>f[i][j](1&lt;=f[i][j]&lt;=1000000)</code>.<br>There are no more than 10 test cases. </p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>One line per case, an integer indicates the answer </p><h2 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h2><figure class="highlight basic"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">0</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h2 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">2<br>9<br></code></pre></td></tr></table></figure><p>直接套矩阵快速幂的板子就行</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br> <br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> ll maxn = <span class="hljs-number">110</span>;<br><span class="hljs-type">const</span> ll mod = <span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Mar</span>&#123;<br>    ll f[maxn][maxn];<br>    ll m;<br>    <span class="hljs-built_in">Mar</span>(ll mm)&#123;<br>        m = mm;<br>        <span class="hljs-built_in">memset</span>(f,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> f);<br>    &#125;<br>    Mar <span class="hljs-keyword">operator</span>*(<span class="hljs-type">const</span>  Mar&amp; b)&#123;<br>        <span class="hljs-function">Mar <span class="hljs-title">ret</span><span class="hljs-params">(m)</span></span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)&#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k=<span class="hljs-number">1</span>;k&lt;=m;k++)&#123;<br>                    ret.f[i][j]=<span class="hljs-built_in">max</span>(ret.f[i][j],f[i][k]+b.f[k][j]);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>    <span class="hljs-function">Mar <span class="hljs-title">pow</span><span class="hljs-params">(ll x)</span></span>&#123;<br>        <span class="hljs-function">Mar <span class="hljs-title">ret</span><span class="hljs-params">(m)</span></span>;<br>        Mar a = *<span class="hljs-keyword">this</span>;<br>        <span class="hljs-keyword">while</span>(x)&#123;<br>            <span class="hljs-keyword">if</span> (x&amp;<span class="hljs-number">1ll</span>)<br>                ret = ret*a;<br>            a=a*a;<br>            x&gt;&gt;=<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    std::ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    std::cin.<span class="hljs-built_in">tie</span>();<br>    ll k,m;<br>    <span class="hljs-keyword">while</span>(cin&gt;&gt;k&gt;&gt;m)&#123;<br>        <span class="hljs-function">Mar <span class="hljs-title">f</span><span class="hljs-params">(m)</span></span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)<br>                cin&gt;&gt;f.f[i][j];<br>        f = f.<span class="hljs-built_in">pow</span>(k<span class="hljs-number">-1</span>);<br>        ll ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)<br>                ans = <span class="hljs-built_in">max</span>(ans,f.f[i][j]);<br>        cout&lt;&lt;ans&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/**************************************************************</span><br><span class="hljs-comment">    Problem: 7561</span><br><span class="hljs-comment">    User: WC011</span><br><span class="hljs-comment">    Language: C++</span><br><span class="hljs-comment">    Result: 正确</span><br><span class="hljs-comment">    Time:416 ms</span><br><span class="hljs-comment">    Memory:2036 kb</span><br><span class="hljs-comment">****************************************************************/</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Polyline-Simplification</title>
    <link href="/2018/04/25/ACM/Polyline-Simplification/"/>
    <url>/2018/04/25/ACM/Polyline-Simplification/</url>
    
    <content type="html"><![CDATA[<p>时间限制: 5 Sec  内存限制: 128 MB</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Mapping applications often represent the boundaries of countries, cities, etc. as polylines, which are connected sequences of line segments. Since fine details have to be shown when the user zooms into the map,these polylines often contain a very large number of segments. When the user zooms out, however, these fine details are not important and it is wasteful to process and draw the polylines with so many segments. In this problem, we consider a particular polyline simplification algorithm designed to approximate the original polyline with a polyline with fewer segments.<br>A polyline with n segments is described by n + 1 points p0 = (x0, y0),… , pn = (xn, yn), with the ith line segment being  . The polyline can be simplified by removing an interior point pi (1≤i≤n-1),so that the line segments  are replaced by the line segment . To select the point to be removed, we examine the area of the triangle formed by pi-1, pi, and pi+1 (the area is 0 if the three points are colinear), and choose the point pi such that the area of the triangle is smallest. Ties are broken by choosing the point with the lowest index. This can be applied again to the resulting polyline, until the desired number m of line segments is reached.<br>Consider the example below.</p><p>The original polyline is shown at the top. The area of the triangle formed by p2, p3, and p4 is considered (middle), and p3 is removed if the area is the smallest among all such triangles. The resulting polyline after p3 is removed is shown at the bottom.</p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>The first line of input contains two integers n (2≤n≤200 000) and m (1≤m &lt; n). The next n+1 lines specify p0,…, pn. Each point is given by its x and y coordinates which are integers between -5000 and 5000 inclusive. You may assume that the given points are strictly increasing in lexicographical order. That is, xi &lt; xi+1, or xi = xi+1 and yi &lt; yi+1 for all 0≤i &lt; n.</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>Print on the kth line the index of the point removed in the kth step of the algorithm described above (use the index in the original polyline).</p><h2 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h2><figure class="highlight basic"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">10 </span><span class="hljs-number">7</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">0</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">10</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">20</span><br><span class="hljs-symbol">25 </span><span class="hljs-number">17</span><br><span class="hljs-symbol">32 </span><span class="hljs-number">19</span><br><span class="hljs-symbol">33 </span><span class="hljs-number">5</span><br><span class="hljs-symbol">40 </span><span class="hljs-number">10</span><br><span class="hljs-symbol">50 </span><span class="hljs-number">13</span><br><span class="hljs-symbol">65 </span><span class="hljs-number">27</span><br><span class="hljs-symbol">75 </span><span class="hljs-number">22</span><br><span class="hljs-symbol">85 </span><span class="hljs-number">17</span><br></code></pre></td></tr></table></figure><h2 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">1<br>9<br></code></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>题目大意是： 给n+1个点，每个点可以与它左右的两个点形成一个三角形，每次删去最小的那个三角形的顶点，直到剩下m+1个点，输出每次删除的点的编号。<br>这是一道模拟题，按照题意写就行。</p><ul><li>求三角形面积时用叉积求出它的面积的两倍，这样可以用int而不是double保存</li><li>为了找到最小的三角形，需要用一个set进行排序</li><li>删除一个点后要更新它左右两个点的数据</li><li>0和n要特殊处理</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn=<span class="hljs-number">200010</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span>&#123;<br>    <span class="hljs-type">int</span> index;<br>    <span class="hljs-type">int</span> area;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> Node b)<span class="hljs-type">const</span> &#123;<br>        <span class="hljs-keyword">if</span> (area==b.area) <span class="hljs-keyword">return</span> index&lt;b.index;<br>        <span class="hljs-keyword">return</span> area&lt;b.area;<br>    &#125;<br>&#125;;<br><br><span class="hljs-type">int</span> LEFT[maxn],RIGHT[maxn];<br><span class="hljs-type">int</span> x[maxn],y[maxn];<br><span class="hljs-type">int</span> area[maxn];<br><span class="hljs-type">int</span> n,m,k;<br>set&lt;Node&gt; ss;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getArea</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> </span>&#123;<br>    <span class="hljs-type">int</span> p1=i,p2=LEFT[i],p3=RIGHT[i];<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">abs</span>(x[p1]*y[p2]+x[p2]*y[p3]+x[p3]*y[p1]-x[p1]*y[p3]-x[p2]*y[p1]-x[p3]*y[p2]);<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<br>    k=n-m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;x[i],&amp;y[i]);<br>    &#125;<br>    LEFT[n]=n<span class="hljs-number">-1</span>;<br>    RIGHT[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++) &#123;<br>        LEFT[i]=i<span class="hljs-number">-1</span>;<br>        RIGHT[i]=i+<span class="hljs-number">1</span>;<br>        area[i]=<span class="hljs-built_in">getArea</span>(i);<br>        ss.<span class="hljs-built_in">insert</span>(Node&#123;i,area[i]&#125;);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=k;i++) &#123;<br>        set&lt;Node&gt;::iterator fir = ss.<span class="hljs-built_in">begin</span>();<br>        <span class="hljs-type">int</span> p = (*fir).index;<br>        ss.<span class="hljs-built_in">erase</span>(fir);<br>        fir=ss.<span class="hljs-built_in">end</span>();<br>        LEFT[RIGHT[p]]=LEFT[p];<br>        RIGHT[LEFT[p]]=RIGHT[p];<br>        <span class="hljs-keyword">if</span> (LEFT[p]!=<span class="hljs-number">0</span>) &#123;<br>            fir = ss.<span class="hljs-built_in">find</span>(Node&#123;LEFT[p], area[LEFT[p]]&#125;);<br>            ss.<span class="hljs-built_in">erase</span>(fir);<br>            area[LEFT[p]] = <span class="hljs-built_in">getArea</span>(LEFT[p]);<br>            ss.<span class="hljs-built_in">insert</span>(Node&#123;LEFT[p], area[LEFT[p]]&#125;);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (RIGHT[p]!=n) &#123;<br>            fir = ss.<span class="hljs-built_in">find</span>(Node&#123;RIGHT[p], area[RIGHT[p]]&#125;);<br>            ss.<span class="hljs-built_in">erase</span>(fir);<br>            area[RIGHT[p]] = <span class="hljs-built_in">getArea</span>(RIGHT[p]);<br>            ss.<span class="hljs-built_in">insert</span>(Node&#123;RIGHT[p], area[RIGHT[p]]&#125;);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,p);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Copy-and-Submit-II</title>
    <link href="/2018/04/22/ACM/Copy-and-Submit-II/"/>
    <url>/2018/04/22/ACM/Copy-and-Submit-II/</url>
    
    <content type="html"><![CDATA[<p>题目链接 <a href="https://nanti.jisuanke.com/t/26220">https://nanti.jisuanke.com/t/26220</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description:"></a>Description:</h2><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// Q.cpp</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> M = <span class="hljs-number">1000000007</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> MAXL = <span class="hljs-number">1000000</span>;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> a[MAXL];<br><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">Q</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">long</span> <span class="hljs-type">long</span> t)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(n &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> t;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-built_in">Q</span>(n - <span class="hljs-number">1</span>, t) + <span class="hljs-built_in">Q</span>(n - <span class="hljs-number">1</span>, (t * a[n]) % M)) % M;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-keyword">while</span>(cin &gt;&gt; n)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)<br>        &#123;<br>            cin &gt;&gt; a[i];<br>            a[i] %= M;<br>        &#125;<br>        cout &lt;&lt; <span class="hljs-built_in">Q</span>(n - <span class="hljs-number">1</span>, <span class="hljs-number">1</span>) &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Input"><a href="#Input" class="headerlink" title="Input:"></a>Input:</h2><p>Input consists of several test cases. Each test case begins with an integer n. Then it’s followed by n integers a[i]. </p><p>0&lt;n&lt;=1000000</p><p>0&lt;=a[i]&lt;=10000</p><p>There are 100 test cases at most. The size of input file is less than 48MB. </p><h2 id="Output"><a href="#Output" class="headerlink" title="Output:"></a>Output:</h2><p>Maybe you can just copy and submit. Maybe not. </p><h2 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">1<br>233<br>1<br>666<br></code></pre></td></tr></table></figure><h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">234<br>667<br></code></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>要求写一个与给定的程序功能一样的程序<br>观察这个递归，然后发现它是求(1+a1)<em>(1+a2)</em>(1+a3)<em>..</em>(1+an) ，递推的求就可以了<br>注意内存大小，不能开数组</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br>ll mod = <span class="hljs-number">1000000007</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ll n;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,&amp;n)!=EOF)&#123;<br>        ll a=<span class="hljs-number">1</span>,fac=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,&amp;a);<br>            fac=(fac+fac*a%mod)%mod;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,fac);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>哥德巴赫猜想</title>
    <link href="/2018/04/22/ACM/%E5%93%A5%E5%BE%B7%E5%B7%B4%E8%B5%AB%E7%8C%9C%E6%83%B3/"/>
    <url>/2018/04/22/ACM/%E5%93%A5%E5%BE%B7%E5%B7%B4%E8%B5%AB%E7%8C%9C%E6%83%B3/</url>
    
    <content type="html"><![CDATA[<p>题目链接 <a href="https://nanti.jisuanke.com/t/25985">https://nanti.jisuanke.com/t/25985</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description:"></a>Description:</h2><p>Goldbach’s conjecture is one of the oldest and best-known unsolved problems in number theory and all of mathematics. It states:</p><p>Every even integer greater than 2 can be expressed as the sum of two primes.</p><p>The actual verification of the Goldbach conjecture shows that even numbers below at least 1e14 can be expressed as a sum of two prime numbers. </p><p>Many times, there are more than one way to represent even numbers as two prime numbers. </p><p>For example, 18=5+13=7+11, 64=3+61=5+59=11+53=17+47=23+41, etc.</p><p>Now this problem is asking you to divide a postive even integer n (2&lt;n&lt;2^63) into two prime numbers.</p><p>Although a certain scope of the problem has not been strictly proved the correctness of Goldbach’s conjecture, we still hope that you can solve it. </p><p>If you find that an even number of Goldbach conjectures are not true, then this question will be wrong, but we would like to congratulate you on solving this math problem that has plagued humanity for hundreds of years.</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input:"></a>Input:</h2><p>The first line of input is a T means the number of the cases.</p><p>Next T lines, each line is a postive even integer n (2&lt;n&lt;2^63).</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output:"></a>Output:</h2><p>The output is also T lines, each line is two number we asked for.</p><p>T is about 100.</p><p>本题答案不唯一，符合要求的答案均正确</p><h2 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h2><figure class="highlight"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs">1<br>8<br></code></pre></td></tr></table></figure><h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>给一个大于2的整数n，求两个质数a和b，使得n=a+b。<br>枚举a，则b=n-a，用米勒罗宾算法判断b是否为质数。<br>枚举a时小数据用欧拉筛，大数据暴力。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> LL;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">2000000</span>;<br>LL primee[maxn], notPrime[maxn], priCnt=<span class="hljs-number">0</span>;<br>LL prime[<span class="hljs-number">6</span>] = &#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">233</span>, <span class="hljs-number">331</span>&#125;;<br><br><span class="hljs-function">LL <span class="hljs-title">qmul</span><span class="hljs-params">(LL x, LL y, LL mod)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> (x * y - (<span class="hljs-type">long</span> <span class="hljs-type">long</span>)(x / (<span class="hljs-type">long</span> <span class="hljs-type">double</span>)mod * y + <span class="hljs-number">1e-3</span>) *mod + mod) % mod;<br>&#125;<br><span class="hljs-function">LL <span class="hljs-title">qpow</span><span class="hljs-params">(LL a, LL n, LL mod)</span> </span>&#123;<br>    LL ret = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(n) &#123;<br>        <span class="hljs-keyword">if</span>(n &amp; <span class="hljs-number">1</span>) ret = <span class="hljs-built_in">qmul</span>(ret, a, mod);<br>        a = <span class="hljs-built_in">qmul</span>(a, a, mod);<br>        n &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Miller_Rabin</span><span class="hljs-params">(LL p)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(p &lt; <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(p != <span class="hljs-number">2</span> &amp;&amp; p % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    LL s = p - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(! (s &amp; <span class="hljs-number">1</span>)) s &gt;&gt;= <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; ++i) &#123;<br>        <span class="hljs-keyword">if</span>(p == prime[i]) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        LL t = s, m = <span class="hljs-built_in">qpow</span>(prime[i], s, p);<br>        <span class="hljs-keyword">while</span>(t != p - <span class="hljs-number">1</span> &amp;&amp; m != <span class="hljs-number">1</span> &amp;&amp; m != p - <span class="hljs-number">1</span>) &#123;<br>            m = <span class="hljs-built_in">qmul</span>(m, m, p);<br>            t &lt;&lt;= <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(m != p - <span class="hljs-number">1</span> &amp;&amp; !(t &amp; <span class="hljs-number">1</span>)) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getPrime</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt; maxn; i++) &#123;<br>        <span class="hljs-keyword">if</span> (!notPrime[i])<br>            primee[priCnt++] = i;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; priCnt &amp;&amp; i * primee[j] &lt; maxn; j++) &#123;<br>            notPrime[i * primee[j]] = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (i % primee[j] == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> t;<br>    LL n;<br>    <span class="hljs-built_in">getPrime</span>();<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;t);<br>    <span class="hljs-keyword">while</span> (t--) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;n);<br>        <span class="hljs-type">int</span> f = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (LL i = <span class="hljs-number">0</span>; i &lt; priCnt; i++) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Miller_Rabin</span>(n - primee[i])) &#123;<br>                f = <span class="hljs-number">1</span>;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld %lld\n&quot;</span>, primee[i], n - primee[i]);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (f == <span class="hljs-number">0</span>) &#123;<br>            LL p=n/<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (p%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>)p--;<br>            <span class="hljs-keyword">for</span> (;p&gt;prime[priCnt<span class="hljs-number">-1</span>];p-=<span class="hljs-number">2</span>) &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Miller_Rabin</span>(p) &amp;&amp; <span class="hljs-built_in">Miller_Rabin</span>(n-p)) &#123;<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld %lld\n&quot;</span>, p , n-p);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hopscotch</title>
    <link href="/2018/04/21/ACM/Hopscotch/"/>
    <url>/2018/04/21/ACM/Hopscotch/</url>
    
    <content type="html"><![CDATA[<p>时间限制: 5 Sec  内存限制: 128 MB</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>You’re playing hopscotch! You start at the origin and your goal is to hop to the lattice point (N, N). A hop consists of going from lattice point (x1, y1) to (x2, y2), where x1 &lt; x2 and y1 &lt; y2.<br>You dislike making small hops though. You’ve decided that for every hop you make between two lattice points, the x-coordinate must increase by at least X and the y-coordinate must increase by at least Y .<br>Compute the number of distinct paths you can take between (0, 0) and (N, N) that respect the above constraints. Two paths are distinct if there is some lattice point that you visit in one path which you don’t visit in the other.<br>Hint: The output involves arithmetic mod 109+ 7. Note that with p a prime like 109+ 7, and x an integer not equal to 0 mod p, then x(xp−2) mod p equals 1 mod p.</p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>The input consists of a line of three integers, N X Y . You may assume 1 ≤ X, Y ≤ N ≤ 106.</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>The number of distinct paths you can take between the two lattice points can be very large. Hence output this number modulo 1 000 000 007 (109+ 7).</p><h2 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h2><figure class="highlight basic"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">7 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h2 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">9<br></code></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>题目大意: 给定三个数<code>n,x,y</code>。表示有一个<code>n*n</code>的方阵，如果<code>x1+x&lt;x2</code>且<code>y1+y&lt;y2</code>，那么可以从<code>(x1,y1)</code>跳到<code>(x2,y2)</code>，问从<code>(0,0)</code>跳到<code>(n,n)</code>有多少种不同的走法。<br>先把行列分开考虑。<br><code>a1[i]</code>表示一列中，从<code>0</code>走到<code>n</code>使用了<code>i</code>步有多少组走法，<code>a2[i]</code>表示一行中，从<code>0</code>走到<code>n</code>使用了<code>i</code>步有多少组走法，则使用<code>i</code>步从<code>(0,0)</code>走到<code>(n,n)</code>的方法数为<code>a1[i]*a2[i]</code>,所以答案<code>ans = a1[1]*a2[1]+a1[2]*a2[2]+...a1[i]*a2[i]</code>。<br>那么如何求出两个<code>a</code>数组呢？我们可以这样考虑，一共有<code>n</code>个点，走<code>i</code>次，这样相当于把<code>n</code>个连续的小球分到<code>i</code>个桶里。因为每个桶至少分<code>x</code>个球，所以我们可以先给每个桶分<code>x-1</code>个球，剩下的<code>n-(x-1)*i</code>个球用隔板法分给<code>i</code>个人。也就是<code>a1[i]=C(n-(x-1)*i-1,i-1)</code>种。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>ll mod = <span class="hljs-number">1000000007</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">1000010</span>;<br><br>ll fac[maxn],inv[maxn];<br>ll a1[maxn],a2[maxn];<br><br><span class="hljs-function">ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll a,ll x)</span></span>&#123;<br>    ll ret=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (x)&#123;<br>        <span class="hljs-keyword">if</span> (x&amp;<span class="hljs-number">1</span>)<br>            ret = ret*a%mod;<br>        a=a*a%mod;<br>        x&gt;&gt;=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-function">ll <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br>    fac[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;maxn;i++)<br>        fac[i]=fac[i<span class="hljs-number">-1</span>]*i%mod;<br>    inv[maxn<span class="hljs-number">-1</span>]=<span class="hljs-built_in">qpow</span>(fac[maxn<span class="hljs-number">-1</span>],mod<span class="hljs-number">-2</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=maxn<span class="hljs-number">-2</span>;i&gt;=<span class="hljs-number">0</span>;i--)<br>        inv[i]=inv[i+<span class="hljs-number">1</span>]*(i+<span class="hljs-number">1</span>)%mod;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function">ll <span class="hljs-title">c</span><span class="hljs-params">(ll n,ll m)</span></span>&#123;<br>    <span class="hljs-keyword">if</span> (n&lt;m) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> fac[n]*inv[m]%mod*inv[n-m]%mod;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">init</span>();<br>    ll n, x, y;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld%lld&quot;</span>, &amp;n, &amp;x, &amp;y);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i * x &lt;= n; i++) &#123;<br>        a1[i] = <span class="hljs-built_in">c</span>(n - (x - <span class="hljs-number">1</span>) * i - <span class="hljs-number">1</span>, i - <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i * y &lt;= n; i++) &#123;<br>        a2[i] = <span class="hljs-built_in">c</span>(n - (y - <span class="hljs-number">1</span>) * i - <span class="hljs-number">1</span>, i - <span class="hljs-number">1</span>);<br>    &#125;<br>    ll ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i * x &lt;= n &amp;&amp; i * y &lt;= n; i++)<br>        ans = (ans + a1[i] * a2[i] % mod) % mod;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">/**************************************************************</span><br><span class="hljs-comment">    Problem: 5095</span><br><span class="hljs-comment">    User: DP56</span><br><span class="hljs-comment">    Language: C++</span><br><span class="hljs-comment">    Result: 正确</span><br><span class="hljs-comment">    Time:916 ms</span><br><span class="hljs-comment">    Memory:32948 kb</span><br><span class="hljs-comment">****************************************************************/</span><br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>等式</title>
    <link href="/2018/04/21/ACM/%E7%AD%89%E5%BC%8F/"/>
    <url>/2018/04/21/ACM/%E7%AD%89%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>链接：<a href="https://www.nowcoder.com/acm/contest/90/F">https://www.nowcoder.com/acm/contest/90/F</a><br>来源：牛客网</p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定n，求1/x + 1/y = 1/n （x&lt;=y）的解数。（x、y、n均为正整数）</p><h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a>输入描述:</h3><p>在第一行输入一个正整数T。<br>接下来有T行，每行输入一个正整数n，请求出符合该方程要求的解数。<br>（1&lt;=n&lt;=1e9）</p><h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a>输出描述:</h3><p>输出符合该方程要求的解数。</p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><figure class="highlight dns"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">3</span><br><span class="hljs-number">1</span><br><span class="hljs-number">20180101</span><br><span class="hljs-number">1000000000</span><br></code></pre></td></tr></table></figure><p>###输出</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">1<br>5<br>181<br></code></pre></td></tr></table></figure><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>由1/x+1/y=1/n 得 (n-x)*(n-y)=n^2<br>又因为x&lt;=y,x、y、n均为正整数,所以原问题等价于求n^2的因子个数</p><p>我们可以使用”因数个数定理”来求解。<br>对大于1的正整数n = p1^a1<em>p2^a2</em>…<em>pk^ak，则n的因数个数为(a1+1)</em>(a2+1)<em>…</em>(ak+1)<br>注意到在这个问题中我们求的是n^2的因数个数，而n的因子肯定也是n^的因子所以我们可以先分解n,然后ans=(2<em>a1+1)</em>(2<em>a2+1)</em>…<em>(2</em>ak+1)</p><p>还有一个坑，由于数组大小的限制，欧拉筛求不出1e7以上的素数。这个坑很好解决，如果当n已经除以所有1e6以下的因子但还没有除尽，这时它肯定只是一个素数了（用反证法，如果是两个大于1e6的素数的乘积，则它大于1e12,而n最大才是1e9,矛盾）。所以如果没除尽，直接ans*=3就可以了。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ctype.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br> <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ull;<br> <br><span class="hljs-type">const</span> ull mod = <span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br> <br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">1000000</span>;<br>ull prime[maxn], notPrime[maxn], priCnt=<span class="hljs-number">0</span>;<br> <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getPrime</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt; maxn; i++) &#123;<br>        <span class="hljs-keyword">if</span> (!notPrime[i])<br>            prime[priCnt++] = i;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; priCnt &amp;&amp; i * prime[j] &lt; maxn; j++) &#123;<br>            notPrime[i * prime[j]] = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (i % prime[j] == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br>    <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;in.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <span class="hljs-built_in">getPrime</span>();<br>    ull t;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%llu&quot;</span>, &amp;t);<br>    <span class="hljs-keyword">while</span> (t--) &#123;<br>        ull n;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%llu&quot;</span>, &amp;n);<br>        ull ans = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; priCnt &amp;&amp; prime[i] &lt;= n; i++) &#123;<br>            ull a = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span> (n % prime[i] == <span class="hljs-number">0</span>) &#123;<br>                n /= prime[i];<br>                a++;<br>            &#125;<br>            ans = ans * ( k * a + <span class="hljs-number">1</span> );<br>        &#125;<br>        <span class="hljs-keyword">if</span> (n!=<span class="hljs-number">1</span>)&#123;<br>            ans  = ans*<span class="hljs-number">3</span>;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%llu\n&quot;</span>, (ans + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>优美的二维树状数组</title>
    <link href="/2018/03/18/ACM/%E4%BC%98%E7%BE%8E%E7%9A%84%E4%BA%8C%E7%BB%B4%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    <url>/2018/03/18/ACM/%E4%BC%98%E7%BE%8E%E7%9A%84%E4%BA%8C%E7%BB%B4%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<p>有一类求一段区间内所有数字的和的问题，以前我是用前缀和数组解决的。<br>今天遇到了二维的树状数组，发现它的代码非常优美，就把这两者一起写一写吧。</p><h2 id="1-一维前缀和数组"><a href="#1-一维前缀和数组" class="headerlink" title="1. 一维前缀和数组"></a>1. 一维前缀和数组</h2><p>假设共有n个数字，我们把它们存放在a数组中</p><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    std::cin&gt;&gt;a[i];<br></code></pre></td></tr></table></figure><p>然后，我们用sum[i]表示a[1]+a[2]+…+a[i],<br>显然sum[i]=sum[i-1]+a[i];<br>很容易就求出了前缀和数组</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">sum[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    sum[i]=sum[i<span class="hljs-number">-1</span>]+a[i]<br></code></pre></td></tr></table></figure><p>当我们要计算l到r闭区间内的所有数字的和时，可以用sum[r]-sum[l-1]求出</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getSum</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> sum[r]-sum[l<span class="hljs-number">-1</span>];<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-二维前缀和数组"><a href="#2-二维前缀和数组" class="headerlink" title="2. 二维前缀和数组"></a>2. 二维前缀和数组</h2><p>如果我们的数字一共有n行m列，想求从左上角(x1,y1)到右下角(x2,y2)的矩形内的数字的和，也可以使用前缀和。<br>我们把数字存放在a[i][j]中,从(1,1)到(i,j)的矩形内数字的和存放在sum[i][j]中</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)&#123;<br>        std::cin&gt;&gt;a[i][j];<br>        sum[i][j]=sum[i<span class="hljs-number">-1</span>][j]+sum[i][j<span class="hljs-number">-1</span>]-sum[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>为什么这样写？自己在草稿本上画一下图就明白了。<br>求和也非常简单</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getSum</span><span class="hljs-params">(<span class="hljs-type">int</span> x1,<span class="hljs-type">int</span> y1,<span class="hljs-type">int</span> x2,<span class="hljs-type">int</span> y2)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> sum[x2][y2]-sum[x2][y1<span class="hljs-number">-1</span>]-sum[x1<span class="hljs-number">-1</span>][y2]+sum[x1<span class="hljs-number">-1</span>][y1<span class="hljs-number">-1</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p>前缀和数组预处理的时间复杂度是O(n<em>m)，查询的时间复杂度是O(1),非常快。<br>但是它有一个缺点就是修改很慢，每次修改一个点就要修改这个点后面的sum数组，时间复杂度是O(n</em>m)</p><h2 id="3-一维树状数组"><a href="#3-一维树状数组" class="headerlink" title="3. 一维树状数组"></a>3. 一维树状数组</h2><p>树状数组查询和修改的时间都是O(log(n)),当有大量的修改时，我们应该使用树状数组<br>注意，这里的sum与前缀和中的sum不同</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> -x&amp;x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> v)</span></span>&#123;<br><span class="hljs-comment">//修改操作，给a[x]加上v</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=x;i&lt;=n;i+=<span class="hljs-built_in">lowbit</span>(i))<br>        sum[i]+=v;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getSum</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br><span class="hljs-comment">//查询a[1]+a[2]+...+a[x]的和</span><br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=x;i;i-=<span class="hljs-built_in">lowbit</span>(i))<br>        ans+=sum[i];<br>    <span class="hljs-keyword">return</span> ans; <br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getSum</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span>&#123;<br><span class="hljs-comment">//查询a[l]+a[l+1]+...+a[r]的和</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">getSum</span>(r)-<span class="hljs-built_in">getSum</span>(l<span class="hljs-number">-1</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>可以看到，两者的getSum非常像</p><h2 id="3-二维树状数组"><a href="#3-二维树状数组" class="headerlink" title="3. 二维树状数组"></a>3. 二维树状数组</h2><p>二维树状数组简直就是一维树状数组和二维前缀和数组结合起来，查询的代码一模一样</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">305</span>;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">STree</span> &#123;<br> <br>    <span class="hljs-type">int</span> a[maxn][maxn];<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> (-x)&amp;x;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y,<span class="hljs-type">int</span> v)</span></span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=x;i&lt;maxn;i+=<span class="hljs-built_in">lowbit</span>(i))&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=y;j&lt;maxn;j+=<span class="hljs-built_in">lowbit</span>(j))&#123;<br>                a[i][j]+=v;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span>&#123;<br>        <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=x;i;i-=<span class="hljs-built_in">lowbit</span>(i))&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=y;j;j-=<span class="hljs-built_in">lowbit</span>(j))&#123;<br>                ans += a[i][j];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> x1,<span class="hljs-type">int</span> y1,<span class="hljs-type">int</span> x2,<span class="hljs-type">int</span> y2)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(x2,y2) - <span class="hljs-built_in">query</span>(x2,y1<span class="hljs-number">-1</span>) - <span class="hljs-built_in">query</span>(x1<span class="hljs-number">-1</span>,y2) + <span class="hljs-built_in">query</span>(x1<span class="hljs-number">-1</span>,y1<span class="hljs-number">-1</span>);<br>    &#125;<br> <br>&#125;;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ChezScheme编译与安装</title>
    <link href="/2018/02/12/%E6%95%99%E7%A8%8B/ChezScheme%E7%BC%96%E8%AF%91%E4%B8%8E%E5%AE%89%E8%A3%85/"/>
    <url>/2018/02/12/%E6%95%99%E7%A8%8B/ChezScheme%E7%BC%96%E8%AF%91%E4%B8%8E%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<p>Chez Scheme是传说中最好的scheme实现。虽然它已经开源了，<del>但是貌似还没有出现在apt软件源中。如果想安装的话，就只能自己编译了</del> 。</p><p>现在ubuntu软件仓库中已经有Chez Scheme的软件包了，直接<code>sudo apt install chezscheme</code>就能安装，<code>scheme</code>就能打开使用。所以这篇博客下面的内容作废。</p><h2 id="1-安装依赖"><a href="#1-安装依赖" class="headerlink" title="1. 安装依赖"></a>1. 安装依赖</h2><p>首先我们需要安装一些需要用到的软件，用于下载源代码的版本控制工具git,用于编译的gcc和make,以及最重要的ncurses库和X windows库，没有这俩就会编译失败。</p><h4 id="ubuntu"><a href="#ubuntu" class="headerlink" title="ubuntu"></a>ubuntu</h4><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">sudo apt install git gcc make libncurses5-dev libx11-dev<br></code></pre></td></tr></table></figure><h4 id="CentOS"><a href="#CentOS" class="headerlink" title="CentOS"></a>CentOS</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install -y git gcc make ncurses-devel libX11-devel<br><br></code></pre></td></tr></table></figure><h2 id="2-下载源码"><a href="#2-下载源码" class="headerlink" title="2. 下载源码"></a>2. 下载源码</h2><p>由于源代码的完整的git仓库比较大，下载所需时间较长，所以只下载最近1次提交</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/cisco/ChezScheme.git --depth 1<br></code></pre></td></tr></table></figure><h2 id="3-编译与安装"><a href="#3-编译与安装" class="headerlink" title="3. 编译与安装"></a>3. 编译与安装</h2><p>这一步需要的时间与网速和电脑的配置有关</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./configure &amp;&amp; sudo make install<br></code></pre></td></tr></table></figure><h2 id="4-使用"><a href="#4-使用" class="headerlink" title="4. 使用"></a>4. 使用</h2><p>直接用<code>scheme</code>即可打开ChezScheme解释器</p><p><img src="/img/ChezScheme.png"></p><p>然后就可以愉(tong)快(ku)的写代码啦</p>]]></content>
    
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在哈尔滨的寒风中</title>
    <link href="/2017/12/10/ACM/%E5%9C%A8%E5%93%88%E5%B0%94%E6%BB%A8%E7%9A%84%E5%AF%92%E9%A3%8E%E4%B8%AD/"/>
    <url>/2017/12/10/ACM/%E5%9C%A8%E5%93%88%E5%B0%94%E6%BB%A8%E7%9A%84%E5%AF%92%E9%A3%8E%E4%B8%AD/</url>
    
    <content type="html"><![CDATA[<p>Time limit per test: 1.0 seconds<br>Memory limit: 256 megabytes</p><p>kblack 来到了寒冬中的哈尔滨，哈尔滨的寒风令 kblack 瑟瑟发抖。</p><p>世界上最远的距离，是你与宾馆只差一条冰街，而你却忘了穿上秋裤。</p><p>kblack 终于冲进了宾馆，宾馆大厅的地板铺满了五颜六色的地砖，可以被看作是一块 n×m 格的棋盘，为了能使冻僵了的双脚尽快暖和起来，kblack 决定在地砖上走动，但是他被速冻的双脚在棋盘地板上只能走马步。</p><p>kblack 居然想知道有多少对地砖（无序点对）他可以通过若干步马步互相抵达！</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>输入包含一行两个正整数 n, m，表示棋盘的大小，保证 1≤n×m≤1e9 。</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>输出包含一个整数，表示 kblack 可以通过马步互相到达的无序地砖对数。</p><h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><h3 id="input"><a href="#input" class="headerlink" title="input"></a>input</h3><p>1 2</p><h3 id="output"><a href="#output" class="headerlink" title="output"></a>output</h3><p>0</p><h3 id="input-1"><a href="#input-1" class="headerlink" title="input"></a>input</h3><p>4 2</p><h3 id="output-1"><a href="#output-1" class="headerlink" title="output"></a>output</h3><p>4</p><h2 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a>题目来源</h2><p>EOJ Monthly 2017.12 (暨 ECNU 12 月内部选拔)</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>虽然限制只能走马步，但我们很容易意识到在足够大的棋盘（例如象棋棋盘）上，马可以达到任何位置。事实上通过简单的验证，可以发现这一大小的下界是 3×4。</p><p>于是对于所有 ≥3×4 的棋盘，我们可以断言所有砖之间可以互相到达，此时答案为 C(nm, 2)。</p><p>当棋盘大小为 3×3 时，通过简单的模拟可以发现外围的 8 块砖可以互相到达，此时答案为C (8, 2)。</p><p>当棋盘大小为 2×n 时，我们发现不同奇偶不同的行/列交替可达，此时有 2 组 ⌊n/2⌋ 的联通块与两组 ⌊(n+1)/2⌋ 的联通块，答案为 C([(n+1)/2⌋, 2)*2 + C(⌊n/2⌋, 2)*2 。</p><p>当棋盘大小为 1×n 时，没有合法的马步，此时答案为 0。</p><p>注意答案可能超过 2147483647，需要使用 long long 类型。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function">ll <span class="hljs-title">C2</span><span class="hljs-params">(ll n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> n*(n<span class="hljs-number">-1</span>)/<span class="hljs-number">2</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br>    <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;in.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    ll n, m;<br>    <span class="hljs-keyword">while</span> (cin &gt;&gt; n &gt;&gt; m) &#123;<br>        <span class="hljs-keyword">if</span> (n &lt; m) <span class="hljs-built_in">swap</span>(n, m);<br>        <span class="hljs-keyword">if</span> (m &gt;= <span class="hljs-number">3</span>) &#123;<br>            <span class="hljs-keyword">if</span> (n &gt;= <span class="hljs-number">4</span>) cout &lt;&lt; <span class="hljs-built_in">C2</span>(n * m) &lt;&lt; endl;<br>            <span class="hljs-keyword">else</span> cout &lt;&lt; <span class="hljs-built_in">C2</span>(<span class="hljs-number">8</span>) &lt;&lt; endl;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (m == <span class="hljs-number">2</span>) &#123;<br>            cout &lt;&lt; <span class="hljs-built_in">C2</span>((n + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>) * <span class="hljs-number">2</span> + <span class="hljs-built_in">C2</span>(n / <span class="hljs-number">2</span>)* <span class="hljs-number">2</span> &lt;&lt; endl;<br>        &#125; <span class="hljs-keyword">else</span> cout &lt;&lt; <span class="hljs-number">0</span> &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件系统_HDU1413</title>
    <link href="/2017/12/05/ACM/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F-HDU1413/"/>
    <url>/2017/12/05/ACM/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F-HDU1413/</url>
    
    <content type="html"><![CDATA[<p>Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 65536/32768 K (Java/Others)</p><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><p>Ignatius做了一个文件系统,为了测试他的文件系统是否能正常工作,他打算对他的文件系统做一些测试.</p><p>刚开始的时候文件系统里只有一个根目录.Ignatius将输入一系列合法的文件操作命令,请你给出文件系统应该给出的相应提示信息.</p><p>Ignatius的文件系统的文件操作命令包括:</p><ol><li>CD [directory name] : 进入当前目录下名为[directory name]的子目录,如果成功,系统应提示”success”,否则提示”no such directory”.</li><li>MD [directory name] : 在当前目录下建立名为[directory name]的子目录,如果当前目录下已经存在名为[directory name]的子目录,则提示”directory already exist”,否则提示”success”.</li><li>RD [directory name] : 删除当前目录下名为[directory name]的子目录,如果当前目录下不存在名为[directory name]的子目录,或者名为[directory name]的子目录下还有文件或子目录,则提示”can not delete the directory”,否则提示”success”.</li><li>CREATE [file name] : 在当前目录下创建名为[file name]的文件,如果当前目录下已经存在名为[file name]的文件,则提示”file already exist”,否则提示”success”.</li><li>DELETE [file name] : 删除当前目录下名为[file name]的文件,如果当前目录下不存在名为[file name]的文件,则提示”no such file”,否则提示”success”.</li></ol><p>以下是几个特殊说明:</p><ol><li>要从当前目录退回到上一级目录可以使用”CD ..”命令来实现,我们约定根目录的上一级目录是其本身,任何一个目录下都不允许创建名为”..”的子目录,如果有命令试图创建名为”..”的子目录,则系统应反馈”directory already exist”.</li><li>要从当前目录直接退回到根目录可以使用”CD &quot;命令来实现,任何一个目录下都不允许创建名为”&quot;的子目录.</li><li>为了方便编程,给出的任意一个[directory name]和[file name]都只包括大写字母(A-Z),并且长度都小于20.</li><li>在同一个目录下允许存在同名的file和directory,但不允许出现同名的file或directory,在不同目录下则无此限制.</li><li>刚开始的时候根目录下没有文件和子目录,当前目录就是根目录本身.</li><li>如果一个操作是成功的,则应在当前文件系统的基础上执行相应的操作,以改变文件系统的状态.</li></ol><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>输入数据只有一组,该组测试数据包含若干行,每行代表一条文件操作命令,我保证每一条命令都是符合命令格式的.<br>处理到文件结束.</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>对于每一条命令,请你给出系统的反馈信息,每个反馈信息占一行.</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight dos"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">CD</span> ACM<br><span class="hljs-built_in">MD</span> ACM<br><span class="hljs-built_in">CD</span> ACM<br>CREATE ACM<br><span class="hljs-built_in">MD</span> ACM<br><span class="hljs-built_in">CD</span> ACM<br><span class="hljs-built_in">CD</span> \<br><span class="hljs-built_in">RD</span> ACM<br><span class="hljs-built_in">CD</span> ACM<br><span class="hljs-built_in">RD</span> ACM<br>DELETE ACM<br><span class="hljs-built_in">CD</span> ..<br><span class="hljs-built_in">RD</span> ACM<br></code></pre></td></tr></table></figure><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs subunit">no such directory<br><span class="hljs-keyword">success</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">success</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">success</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">success</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">success</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">success</span><br><span class="hljs-keyword"></span>can not delete the directory<br><span class="hljs-keyword">success</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">success</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">success</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">success</span><br><span class="hljs-keyword"></span>success<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Block</span> &#123;<br>    <span class="hljs-type">int</span> type; <span class="hljs-comment">// 1 file , 0 directory</span><br>    <span class="hljs-type">char</span> name[<span class="hljs-number">256</span>];<br>    Block *root;<br>    Block *father;<br>    vector&lt;Block *&gt; son;<br><br>    <span class="hljs-built_in">Block</span>(Block *fa, <span class="hljs-type">char</span> name[], <span class="hljs-type">int</span> type) &#123;<br>        <span class="hljs-comment">// 创建普通目录及文件</span><br>        <span class="hljs-built_in">strcpy</span>(<span class="hljs-keyword">this</span>-&gt;name, name);<br>        root = fa-&gt;root;<br>        father = fa;<br>        <span class="hljs-keyword">this</span>-&gt;type = type;<br>    &#125;<br><br>    <span class="hljs-built_in">Block</span>() &#123;<br>        <span class="hljs-comment">// 创建root目录</span><br>        <span class="hljs-built_in">strcpy</span>(name, <span class="hljs-string">&quot;\\&quot;</span>);<br>        type = <span class="hljs-number">0</span>;<br>        root = <span class="hljs-keyword">this</span>;<br>        father = <span class="hljs-keyword">this</span>;<br><br>    &#125;<br><br>    <span class="hljs-function">Block *<span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">char</span> name[], <span class="hljs-type">int</span> type)</span> </span>&#123;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(name, <span class="hljs-string">&quot;\\&quot;</span>) == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> root;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(name, <span class="hljs-string">&quot;..&quot;</span>) == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> father;<br>        <span class="hljs-keyword">for</span> (Block *bl:son) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(bl-&gt;name, name) == <span class="hljs-number">0</span> &amp;&amp; bl-&gt;type == type) <span class="hljs-keyword">return</span> bl;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">md</span><span class="hljs-params">(<span class="hljs-type">char</span> name[])</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">find</span>(name, <span class="hljs-number">0</span>) != <span class="hljs-literal">NULL</span>) &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;directory already exist&quot;</span> &lt;&lt; endl;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            Block *tmp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Block</span>(<span class="hljs-keyword">this</span>, name, <span class="hljs-number">0</span>);<br>            son.<span class="hljs-built_in">push_back</span>(tmp);<br>            cout &lt;&lt; <span class="hljs-string">&quot;success&quot;</span> &lt;&lt; endl;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">rd</span><span class="hljs-params">(<span class="hljs-type">char</span> name[])</span> </span>&#123;<br>        Block *p = <span class="hljs-built_in">find</span>(name, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">NULL</span> || p == father || p == root || p-&gt;son.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">0</span>) &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;can not delete the directory&quot;</span> &lt;&lt; endl;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">for</span> (vector&lt;Block *&gt;::iterator it = son.<span class="hljs-built_in">begin</span>(); it != son.<span class="hljs-built_in">end</span>(); it++) &#123;<br>                <span class="hljs-keyword">if</span> (*it == p) &#123;<br>                    son.<span class="hljs-built_in">erase</span>(it);<br>                    <span class="hljs-keyword">delete</span> p;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            cout &lt;&lt; <span class="hljs-string">&quot;success&quot;</span> &lt;&lt; endl;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">ls</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (Block *bl:son) &#123;<br>            cout &lt;&lt; bl-&gt;type &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; bl-&gt;name &lt;&lt; endl;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">cre</span><span class="hljs-params">(<span class="hljs-type">char</span> name[])</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">find</span>(name, <span class="hljs-number">1</span>) != <span class="hljs-literal">NULL</span>) &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;file already exist&quot;</span> &lt;&lt; endl;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            Block *tmp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Block</span>(<span class="hljs-keyword">this</span>, name, <span class="hljs-number">1</span>);<br>            son.<span class="hljs-built_in">push_back</span>(tmp);<br>            cout &lt;&lt; <span class="hljs-string">&quot;success&quot;</span> &lt;&lt; endl;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">del</span><span class="hljs-params">(<span class="hljs-type">char</span> name[])</span> </span>&#123;<br>        Block *p = <span class="hljs-built_in">find</span>(name, <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">NULL</span>) &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;no such file&quot;</span> &lt;&lt; endl;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">for</span> (vector&lt;Block *&gt;::iterator it = son.<span class="hljs-built_in">begin</span>(); it != son.<span class="hljs-built_in">end</span>(); it++) &#123;<br>                <span class="hljs-keyword">if</span> (*it == p) &#123;<br>                    son.<span class="hljs-built_in">erase</span>(it);<br>                    <span class="hljs-keyword">delete</span> p;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            cout &lt;&lt; <span class="hljs-string">&quot;success&quot;</span> &lt;&lt; endl;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">pwd</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> == root) &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;\\&quot;</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            father-&gt;<span class="hljs-built_in">pwd</span>();<br>            cout &lt;&lt; name &lt;&lt; <span class="hljs-string">&quot;\\&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span>  <span class="hljs-title">cd</span><span class="hljs-params">(Block*&amp;cur,<span class="hljs-type">char</span> to[])</span></span><br><span class="hljs-function"></span>&#123;<br>    Block* p=cur-&gt;<span class="hljs-built_in">find</span>(to,<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (p==<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;no such directory&quot;</span>&lt;&lt;endl;<br>        <span class="hljs-keyword">return</span>  <span class="hljs-number">1</span>;<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        cur=p;<br>        cout&lt;&lt;<span class="hljs-string">&quot;success&quot;</span>&lt;&lt;endl;<br>        <span class="hljs-keyword">return</span>  <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    Block * root = <span class="hljs-keyword">new</span> Block;<br>    Block * dir=root;<br>    <span class="hljs-type">char</span> a[<span class="hljs-number">100</span>],b[<span class="hljs-number">100</span>];<br>    <span class="hljs-keyword">while</span> (cin&gt;&gt;a)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(a,<span class="hljs-string">&quot;CD&quot;</span>)==<span class="hljs-number">0</span>) &#123;<br>            cin&gt;&gt;b;<br>            <span class="hljs-built_in">cd</span>(dir,b);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(a,<span class="hljs-string">&quot;MD&quot;</span>)==<span class="hljs-number">0</span>)&#123;<br>            cin&gt;&gt;b;<br>            dir-&gt;<span class="hljs-built_in">md</span>(b);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(a,<span class="hljs-string">&quot;LS&quot;</span>)==<span class="hljs-number">0</span>) &#123;<br>            dir-&gt;<span class="hljs-built_in">ls</span>();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(a,<span class="hljs-string">&quot;RD&quot;</span>)==<span class="hljs-number">0</span>)<br>        &#123;<br>            cin&gt;&gt;b;<br>            dir-&gt;<span class="hljs-built_in">rd</span>(b);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(a,<span class="hljs-string">&quot;CREATE&quot;</span>)==<span class="hljs-number">0</span>)<br>        &#123;<br>            cin&gt;&gt;b;<br>            dir-&gt;<span class="hljs-built_in">cre</span>(b);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(a,<span class="hljs-string">&quot;DELETE&quot;</span>)==<span class="hljs-number">0</span>)<br>        &#123;<br>            cin&gt;&gt;b;<br>            dir-&gt;<span class="hljs-built_in">del</span>(b);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(a,<span class="hljs-string">&quot;PWD&quot;</span>)==<span class="hljs-number">0</span>)&#123;<br>            dir-&gt;<span class="hljs-built_in">pwd</span>();<br>            cout&lt;&lt;endl;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第k大数_二分法</title>
    <link href="/2017/11/29/ACM/%E7%AC%ACk%E5%A4%A7%E6%95%B0-%E4%BA%8C%E5%88%86%E6%B3%95/"/>
    <url>/2017/11/29/ACM/%E7%AC%ACk%E5%A4%A7%E6%95%B0-%E4%BA%8C%E5%88%86%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>时间限制: 10 Sec  内存限制: 128 MB</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>有两个序列a，b，它们的长度分别为n和m，那么将两个序列中的元素对应相乘后得到的n*m个元素从大到小排列后的第k个元素是什么？</p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>输入的第一行为一个正整数T (T&lt;=10)，代表一共有T组测试数据。</p><p>每组测试数据的第一行有三个正整数n，m和k(1&lt;=n, m&lt;=100000,1&lt;=k&lt;=n*m)，分别代表a序列的长度，b序列的长度，以及所求元素的下标。第二行为n个正整数代表序列a。第三行为m个正整数代表序列b。序列中所有元素的大小满足[1,100000]。</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>对于每组测试数据，输出一行包含一个整数代表第k大的元素是多少。</p><h2 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h2><figure class="highlight basic"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">3</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">2</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">2</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">3<br>1<br>1<br></code></pre></td></tr></table></figure><h2 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h2><p>首届全国中医药院校大学生程序设计竞赛</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>用二分法，每次猜一个数x，求出有多少个数比x大，直到有k个时停止<br>最后有可能会大1，所以特判一下</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXN = <span class="hljs-number">100010</span>;<br>ll a[MAXN],b[MAXN];<br>ll n,m,k,t;<br><br><span class="hljs-function">ll <span class="hljs-title">check</span><span class="hljs-params">(ll x)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll cnt=<span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=n<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)<br>    &#123;<br>        <span class="hljs-keyword">while</span>(a[i]*b[j]&lt;x&amp;&amp;j&lt;m<span class="hljs-number">-1</span>) j++;<br>        <span class="hljs-keyword">if</span> (a[i]*b[j]&gt;=x) cnt+=m-j;<br>    &#125;<br>    <span class="hljs-keyword">return</span> cnt;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ONLINE_JUDGE</span><br>        <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;in.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>,stdin);<br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// ONLINE_JUDGE</span></span><br><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,&amp;t);<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld%lld&quot;</span>,&amp;n,&amp;m,&amp;k);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,&amp;a[i]);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,&amp;b[i]);<br>        <span class="hljs-built_in">sort</span>(a,a+n);<br>        <span class="hljs-built_in">sort</span>(b,b+m);<br>        ll l=a[<span class="hljs-number">0</span>]*b[<span class="hljs-number">0</span>],r=a[n<span class="hljs-number">-1</span>]*b[m<span class="hljs-number">-1</span>];<br>        <span class="hljs-keyword">while</span> (l&lt;r)<br>        &#123;<br>            ll mid=(l+r)/<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(mid)&gt;=k) l=mid+<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span> r=mid<span class="hljs-number">-1</span>;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-built_in">check</span>(l)&lt;k) l--;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,l);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>还是畅通工程</title>
    <link href="/2017/11/08/ACM/%E8%BF%98%E6%98%AF%E7%95%85%E9%80%9A%E5%B7%A5%E7%A8%8B/"/>
    <url>/2017/11/08/ACM/%E8%BF%98%E6%98%AF%E7%95%85%E9%80%9A%E5%B7%A5%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>Time Limit: 4000/2000 MS (Java/Others)    Memory Limit: 65536/32768 K (Java/Others)</p><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><p>某省调查乡村交通状况，得到的统计表中列出了任意两村庄间的距离。省政府“畅通工程”的目标是使全省任何两个村庄间都可以实现公路交通（但不一定有直接的公路相连，只要能间接通过公路可达即可），并要求铺设的公路总长度为最小。请计算最小的公路总长度。</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>测试输入包含若干测试用例。每个测试用例的第1行给出村庄数目N ( &lt; 100 )；随后的N(N-1)/2行对应村庄间的距离，每行给出一对正整数，分别是两个村庄的编号，以及此两村庄间的距离。为简单起见，村庄从1到N编号。<br>当N为0时，输入结束，该用例不被处理。</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>对每个测试用例，在1行里输出最小的公路总长度。</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight basic"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-number">4</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">4</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">4</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">4</span> <span class="hljs-number">5</span><br><span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">3<br>5<br></code></pre></td></tr></table></figure><h2 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h2><p>Huge input, scanf is recommended.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>最小生成树，直接看代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> fa[<span class="hljs-number">105</span>],n;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Edge</span><br>&#123;<br>    <span class="hljs-type">int</span> u,v,l;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> Edge &amp; tmp) <span class="hljs-type">const</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> l&lt;tmp.l;<br>    &#125;<br>&#125;edge[<span class="hljs-number">10005</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (fa[x]==x) <span class="hljs-keyword">return</span> x;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> fa[x]=<span class="hljs-built_in">find</span>(fa[x]);<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n),n)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=n;i++)<br>            fa[i]=i;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n*(n<span class="hljs-number">-1</span>)/<span class="hljs-number">2</span>;i++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;edge[i].u,&amp;edge[i].v,&amp;edge[i].l);<br>        &#125;<br>        <span class="hljs-built_in">sort</span>(edge,edge+n*(n<span class="hljs-number">-1</span>)/<span class="hljs-number">2</span>);<br>        <span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n*(n<span class="hljs-number">-1</span>)/<span class="hljs-number">2</span>;i++)<br>        &#123;<br>            <span class="hljs-type">int</span> x=<span class="hljs-built_in">find</span>(edge[i].u);<br>            <span class="hljs-type">int</span> y=<span class="hljs-built_in">find</span>(edge[i].v);<br>            <span class="hljs-keyword">if</span> (x!=y)<br>            &#123;<br>                fa[x]=y;<br>                sum+=edge[i].l;<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,sum);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>魔戒_4维bfs搜索</title>
    <link href="/2017/11/08/ACM/%E9%AD%94%E6%88%92-4%E7%BB%B4bfs%E6%90%9C%E7%B4%A2/"/>
    <url>/2017/11/08/ACM/%E9%AD%94%E6%88%92-4%E7%BB%B4bfs%E6%90%9C%E7%B4%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><p>蓝色空间号和万有引力号进入了四维水洼，发现了四维物体–魔戒。<br>这里我们把飞船和魔戒都抽象为四维空间中的一个点，分别标为 “S” 和 “E”。空间中可能存在障碍物，标为 “#”，其他为可以通过的位置。<br>现在他们想要尽快到达魔戒进行探索，你能帮他们算出最小时间是最少吗？我们认为飞船每秒只能沿某个坐标轴方向移动一个单位，且不能越出四维空间。</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>输入数据有多组（数据组数不超过 30），到 EOF 结束。<br>每组输入 4 个数 x, y, z, w 代表四维空间的尺寸（1 &lt;= x, y, z, w &lt;= 30）。<br>接下来的空间地图输入按照 x, y, z, w 轴的顺序依次给出，你只要按照下面的坐标关系循环读入即可。<br>for 0, x-1<br>    for 0, y-1<br>        for 0, z-1<br>            for 0, w-1<br>保证 “S” 和 “E” 唯一。</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>对于每组数据，输出一行，到达魔戒所需的最短时间。<br>如果无法到达，输出 “WTF”（不包括引号）。</p><h2 id="Example-Input"><a href="#Example-Input" class="headerlink" title="Example Input"></a>Example Input</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><pre><code class="hljs jboss-cli">2 2 2 2<br><span class="hljs-string">..</span><br><span class="hljs-string">.S</span><br><span class="hljs-string">..</span><br><span class="hljs-comment">#.</span><br><span class="hljs-comment">#.</span><br><span class="hljs-string">.E</span><br>.<span class="hljs-comment">#</span><br><span class="hljs-string">..</span><br>2 2 2 2<br><span class="hljs-string">..</span><br><span class="hljs-string">.S</span><br><span class="hljs-comment">#.</span><br><span class="hljs-comment">##</span><br>E.<br>.<span class="hljs-comment">#</span><br><span class="hljs-comment">#.</span><br><span class="hljs-string">..</span><br></code></pre></td></tr></table></figure><h2 id="Example-Output"><a href="#Example-Output" class="headerlink" title="Example Output"></a>Example Output</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">1<br>3<br></code></pre></td></tr></table></figure><p>“师创杯”山东理工大学第九届ACM程序设计竞赛 正式赛</p><p>裸的bfs水题,只是维数从二维变成四维而已，其它的都和二维一样</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><span class="hljs-type">int</span> area[<span class="hljs-number">35</span>][<span class="hljs-number">35</span>][<span class="hljs-number">35</span>][<span class="hljs-number">35</span>],vis[<span class="hljs-number">35</span>][<span class="hljs-number">35</span>][<span class="hljs-number">35</span>][<span class="hljs-number">35</span>];<br><span class="hljs-type">int</span> x,y,z,w,sx,sy,sz,sw,ex,ey,ez,ew;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">int</span> x,y,z,w,step;<br>    Node(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y,<span class="hljs-type">int</span> z,<span class="hljs-type">int</span> w,<span class="hljs-type">int</span> s):x(x),y(y),z(z),w(w),step(s)&#123;&#125;;<br><br>&#125;;<br><br><span class="hljs-type">int</span> dir[<span class="hljs-number">8</span>][<span class="hljs-number">4</span>]=&#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;,&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;,&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>&#125;,&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>&#125;,&#123;<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;,&#123;<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;,&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>&#125;,&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>&#125;&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">check</span><span class="hljs-params">(<span class="hljs-type">int</span> dx,<span class="hljs-type">int</span> dy,<span class="hljs-type">int</span> dz,<span class="hljs-type">int</span> dw)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (dx&lt;<span class="hljs-number">0</span>||dx&gt;=x||dy&lt;<span class="hljs-number">0</span>||dy&gt;=y||dz&lt;<span class="hljs-number">0</span>||dz&gt;=z||dw&lt;<span class="hljs-number">0</span>||dw&gt;=w)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">bfs</span><span class="hljs-params">()</span><br>&#123;<br>    Node <span class="hljs-title function_">tmp</span><span class="hljs-params">(sx,sy,sz,sw,<span class="hljs-number">0</span>)</span>;<br>    <span class="hljs-built_in">queue</span>&lt;Node&gt; que;<br>    que.push(tmp);<br>    vis[tmp.x][tmp.y][tmp.z][tmp.w]=tmp.step;<br>    <span class="hljs-keyword">while</span>(!que.empty())<br>    &#123;<br>        tmp=que.front();<br>        que.pop();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> ijk=<span class="hljs-number">0</span>;ijk&lt;<span class="hljs-number">8</span>;ijk++)<br>        &#123;<br>            <span class="hljs-type">int</span> dx=tmp.x+dir[ijk][<span class="hljs-number">0</span>];<br>            <span class="hljs-type">int</span> dy=tmp.y+dir[ijk][<span class="hljs-number">1</span>];<br>            <span class="hljs-type">int</span> dz=tmp.z+dir[ijk][<span class="hljs-number">2</span>];<br>            <span class="hljs-type">int</span> dw=tmp.w+dir[ijk][<span class="hljs-number">3</span>];<br>            <span class="hljs-keyword">if</span> (check(dx,dy,dz,dw)==<span class="hljs-number">0</span>||area[dx][dy][dz][dw]==<span class="hljs-number">1</span>)<br>                <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span> (dx==ex&amp;&amp;dy==ey&amp;&amp;dz==ez&amp;&amp;dw==ew)<br>                <span class="hljs-keyword">return</span> tmp.step+<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (vis[dx][dy][dz][dw]!=<span class="hljs-number">0</span>&amp;&amp;vis[dx][dy][dz][dw]&lt;=tmp.step+<span class="hljs-number">1</span>)<br>                <span class="hljs-keyword">continue</span>;<br>            vis[dx][dy][dz][dw]=tmp.step+<span class="hljs-number">1</span>;<br>            Node <span class="hljs-title function_">aaa</span><span class="hljs-params">(dx,dy,dz,dw,tmp.step+<span class="hljs-number">1</span>)</span>;<br>            que.push(aaa);<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;z,&amp;w)!=EOF)<br>    &#123;<br>        <span class="hljs-type">char</span> tmp;<br>        <span class="hljs-built_in">memset</span>(area,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(area));<br>        <span class="hljs-built_in">memset</span>(vis,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(vis));<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;x;i++)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;y;j++)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;k&lt;z;k++)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> l=<span class="hljs-number">0</span>;l&lt;w;l++)<br>        &#123;<br>            <span class="hljs-built_in">cin</span>&gt;&gt;tmp;<br>            <span class="hljs-keyword">if</span> (tmp==<span class="hljs-string">&#x27;#&#x27;</span>)<br>                area[i][j][k][l]=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (tmp==<span class="hljs-string">&#x27;S&#x27;</span>)<br>            &#123;<br>                sx=i;sy=j;sz=k;sw=l;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (tmp==<span class="hljs-string">&#x27;E&#x27;</span>)<br>            &#123;<br>                ex=i;ey=j;ez=k;ew=l;<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">int</span> ans=bfs();<br>        <span class="hljs-keyword">if</span> (ans!=<span class="hljs-number">-1</span>)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,ans);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;WTF\n&quot;</span>);<br>    &#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br><span class="hljs-comment">/***************************************************</span><br><span class="hljs-comment">Result: Accepted</span><br><span class="hljs-comment">Take time: 576ms</span><br><span class="hljs-comment">Take Memory: 2092KB</span><br><span class="hljs-comment">Submit time: 2017-06-04 15:20:48</span><br><span class="hljs-comment">****************************************************/</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
